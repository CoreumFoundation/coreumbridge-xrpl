// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CoreumFoundation/coreumbridge-xrpl/relayer/logger (interfaces: Logger,ParallelLogger)

// Package logger is a generated GoMock package.
package logger

import (
	context "context"
	reflect "reflect"

	parallel "github.com/CoreumFoundation/coreum-tools/pkg/parallel"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// ParallelLogger mocks base method.
func (m *MockLogger) ParallelLogger(arg0 context.Context) ParallelLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParallelLogger", arg0)
	ret0, _ := ret[0].(ParallelLogger)
	return ret0
}

// ParallelLogger indicates an expected call of ParallelLogger.
func (mr *MockLoggerMockRecorder) ParallelLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParallelLogger", reflect.TypeOf((*MockLogger)(nil).ParallelLogger), arg0)
}

// Warn mocks base method.
func (m *MockLogger) Warn(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// MockParallelLogger is a mock of ParallelLogger interface.
type MockParallelLogger struct {
	ctrl     *gomock.Controller
	recorder *MockParallelLoggerMockRecorder
}

// MockParallelLoggerMockRecorder is the mock recorder for MockParallelLogger.
type MockParallelLoggerMockRecorder struct {
	mock *MockParallelLogger
}

// NewMockParallelLogger creates a new mock instance.
func NewMockParallelLogger(ctrl *gomock.Controller) *MockParallelLogger {
	mock := &MockParallelLogger{ctrl: ctrl}
	mock.recorder = &MockParallelLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParallelLogger) EXPECT() *MockParallelLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockParallelLogger) Debug(arg0 string, arg1 int64, arg2 parallel.OnExit, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0, arg1, arg2, arg3)
}

// Debug indicates an expected call of Debug.
func (mr *MockParallelLoggerMockRecorder) Debug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockParallelLogger)(nil).Debug), arg0, arg1, arg2, arg3)
}

// Error mocks base method.
func (m *MockParallelLogger) Error(arg0 string, arg1 int64, arg2 parallel.OnExit, arg3 string, arg4 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0, arg1, arg2, arg3, arg4)
}

// Error indicates an expected call of Error.
func (mr *MockParallelLoggerMockRecorder) Error(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockParallelLogger)(nil).Error), arg0, arg1, arg2, arg3, arg4)
}
