// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CoreumFoundation/coreumbridge-xrpl/relayer/xrpl (interfaces: HTTPClient,RPCMetricRegistry)
//
// Generated by this command:
//
//	mockgen -destination=rpc_mocks_test.go -package=xrpl_test . HTTPClient,RPCMetricRegistry
//

// Package xrpl_test is a generated GoMock package.
package xrpl_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// DoJSON mocks base method.
func (m *MockHTTPClient) DoJSON(arg0 context.Context, arg1, arg2 string, arg3 any, arg4 func([]byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoJSON", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoJSON indicates an expected call of DoJSON.
func (mr *MockHTTPClientMockRecorder) DoJSON(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoJSON", reflect.TypeOf((*MockHTTPClient)(nil).DoJSON), arg0, arg1, arg2, arg3, arg4)
}

// MockRPCMetricRegistry is a mock of RPCMetricRegistry interface.
type MockRPCMetricRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRPCMetricRegistryMockRecorder
}

// MockRPCMetricRegistryMockRecorder is the mock recorder for MockRPCMetricRegistry.
type MockRPCMetricRegistryMockRecorder struct {
	mock *MockRPCMetricRegistry
}

// NewMockRPCMetricRegistry creates a new mock instance.
func NewMockRPCMetricRegistry(ctrl *gomock.Controller) *MockRPCMetricRegistry {
	mock := &MockRPCMetricRegistry{ctrl: ctrl}
	mock.recorder = &MockRPCMetricRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCMetricRegistry) EXPECT() *MockRPCMetricRegistryMockRecorder {
	return m.recorder
}

// IncrementXRPLRPCDecodingErrorCounter mocks base method.
func (m *MockRPCMetricRegistry) IncrementXRPLRPCDecodingErrorCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementXRPLRPCDecodingErrorCounter")
}

// IncrementXRPLRPCDecodingErrorCounter indicates an expected call of IncrementXRPLRPCDecodingErrorCounter.
func (mr *MockRPCMetricRegistryMockRecorder) IncrementXRPLRPCDecodingErrorCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementXRPLRPCDecodingErrorCounter", reflect.TypeOf((*MockRPCMetricRegistry)(nil).IncrementXRPLRPCDecodingErrorCounter))
}
